<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>book on 码艺术</title>
    <link>https://yunteng9345.github.io/categories/book/</link>
    <description>Recent content in book on 码艺术</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 23 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://yunteng9345.github.io/categories/book/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>《MySQL是怎样运行的》笔记</title>
      <link>https://yunteng9345.github.io/p/mysql%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%90%E8%A1%8C%E7%9A%84%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 23 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yunteng9345.github.io/p/mysql%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%90%E8%A1%8C%E7%9A%84%E7%AC%94%E8%AE%B0/</guid>
      <description>MySQL服务器处理客户端请求
客户端进程向服务端进程发送一段文本（MySQL语句），服务器处理后再向客户端发送一段文本（数据结果）
 连接管理  处理连接   解析与优化  查询缓存 语法解析 查询优化   存储引擎  MyISAM、InnoDB 文件系统    </description>
    </item>
    
    <item>
      <title>《单元测试的艺术》笔记</title>
      <link>https://yunteng9345.github.io/p/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E7%9A%84%E8%89%BA%E6%9C%AF%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 23 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yunteng9345.github.io/p/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E7%9A%84%E8%89%BA%E6%9C%AF%E7%AC%94%E8%AE%B0/</guid>
      <description>优秀单元测试特性  他应该是自动化的，可重复执行 他应该很容易实现 他应该第二天还有意义 任何人都应该一键运行他 他应该运行速度很快 他的结果应该是很稳定的（如果运行之间没有修改，多次运行一个测试应该返回相同的结果） 他应该能完全控制被测试的单元 他应该是完全隔离的（独立于其他测试的运行） 如果他失败了，我们应该很容易发现什么是期待结果，进而定位问题  单元测试不等于集成测试 任何测试，如果他运行不快，结果不稳定，或者用到被测试单元的一个或多个真实依赖物，我们就认为他是集成测试。
单元测试也可以共用方法，使代码一目了然
存根（stub）和模拟对象的区别 存根是用来模拟各种场景的测试对象
细节 测试过程中，如果一个断言失败了，那么不需要关心后面的断言
单元测试，只做一件事情
Mock Mocks are used as a replacement for a dependency.、
断言注意 单元测试中不应该有多个断言，如果有的话，可分成2个单元测试。避免多个关注点
覆盖率低于20%说明缺少很多测试
断言中的魔法值应该用常量的英文单词，可一眼看出预期。
断言和操作分离
单元测试失败的原因：要改变人的习惯，更多的是做出心理上的改变，而非技术上的。人们不喜欢改变，改变通常伴随着害怕、不确定和怀疑。
 image-20211111152032834 
​	——摘自《单元测试的艺术》
研究表明：大部分的缺陷并不是来自代码自身，而是由人们之间的误解、不断变化的需求以及缺少应用领域知识造成的。</description>
    </item>
    
    <item>
      <title>《重构第二版》笔记</title>
      <link>https://yunteng9345.github.io/p/%E9%87%8D%E6%9E%84%E7%AC%AC%E4%BA%8C%E7%89%88%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 23 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yunteng9345.github.io/p/%E9%87%8D%E6%9E%84%E7%AC%AC%E4%BA%8C%E7%89%88%E7%AC%94%E8%AE%B0/</guid>
      <description>第1章——重构，第一个示例 思想  需求的变化使重构变得必要
重构就是以微小的步伐修改程序，如果有问题，可立马发现
傻瓜都能写出计算机可以理解的代码，唯有能写出人类容易理解的代码，才是优秀的程序员
 步骤  重构前，检查自己是否有一套可靠的测试集，这些测试必须有自我检验的能力（单元测试） 把复杂的代码分解为更小的单元  细节  将函数分割为单一功能，提炼到外部提供调用 改动完成之后，立马编译执行一遍单元测试，原因：在真的犯了错误时：只需要考虑一个很小的改动范围，使得排查与修复问题易如反掌。 变量改名，使它们更加简洁 处理结果变量时，将循环代码和变量放在一起，然后用查询函数取代临时变量 利用多态取代条件表达式  第2章——重构的原则 思想  重构的唯一目的就是让我们开发的更快，用更少的工作量创造更大的价值。
 第2章——重构的原则
第3章——代码的坏味道 思想  命名函数或变量，如果想不出一个好名字，说明背后很可能潜藏着更深的设计问题。
 步骤  规范注释，参照Spring源码   细节     </description>
    </item>
    
  </channel>
</rss>
