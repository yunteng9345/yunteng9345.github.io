<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>复习 on 码艺术</title>
    <link>https://yunteng9345.github.io/tags/%E5%A4%8D%E4%B9%A0/</link>
    <description>Recent content in 复习 on 码艺术</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 23 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://yunteng9345.github.io/tags/%E5%A4%8D%E4%B9%A0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>《重构第二版》笔记</title>
      <link>https://yunteng9345.github.io/p/%E9%87%8D%E6%9E%84%E7%AC%AC%E4%BA%8C%E7%89%88%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 23 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yunteng9345.github.io/p/%E9%87%8D%E6%9E%84%E7%AC%AC%E4%BA%8C%E7%89%88%E7%AC%94%E8%AE%B0/</guid>
      <description>从古至今，长江和黄河流域水患不断，远古时期，大禹曾拓宽河道，清除淤沙让流水更加顺畅；都江堰作为史上最成功的的治水案例之一，用引流将岷江之水分流到多个支流中，以分担水流压力；三门峡和葛洲坝通过建造水库将水引入水库先存储起来，然后再想办法把水库中的水缓缓地排出去，以此提高下游的抗洪能力。
 高并发的处理方式目前有三种方式
 Scale-out(横向扩展)：采用分布式部署的方式把流量分流开，让每个服务器都承担一部分并发和流量。 缓存：使用缓存来提高系统的性能（空间换时间） 异步：某些场景下，处理未完成的请求时，可以先让请求返回，数据准备好之后返回请求方。这样可以在单位时间内处理更多的请求。  OSI 网络模型分层：物理层、数据链路层、 网络层、传输层、 会话层、表现层、应用层。
TCP/IP 协议分层： 链路层、 网络层、传输层、 应用层。
高可用系统设计的思路   系统设计
  failover机制
  超时调整
  降级、限流
    系统运维
  灰度发布
  故障演练
    高可扩展性的设计思路  拆分，将复杂问题简单化   1. 存储层的扩展性  业务维度 数据库维度  2. 业务层的扩展性  业务 重要性 请求来源  对于数据库连接池，根据我的经验，一般在线上我建议最小连接数控制在 10 左右，最大连接数控制在 20～30 左右即可。
java线程池学习（重要）</description>
    </item>
    
  </channel>
</rss>
