<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 码艺术</title>
    <link>https://yunteng9345.github.io/post/</link>
    <description>Recent content in Posts on 码艺术</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 04 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://yunteng9345.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>《金字塔原理》读书笔记</title>
      <link>https://yunteng9345.github.io/p/%E9%87%91%E5%AD%97%E5%A1%94%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 04 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yunteng9345.github.io/p/%E9%87%91%E5%AD%97%E5%A1%94%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description>金字塔原理  第1篇 表达的逻辑 第2篇 思考的逻辑 第3篇 解决问题的逻辑 第4篇 演示的逻辑  对受众（包括读者、听众、观众或学员）来说，最容易理解的顺序是：先了解主要的、抽象的思想，然后了解次要的、为主要思想提供支持的思想。</description>
    </item>
    
    <item>
      <title>《MySQL是怎样运行的》笔记</title>
      <link>https://yunteng9345.github.io/p/mysql%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%90%E8%A1%8C%E7%9A%84%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 23 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yunteng9345.github.io/p/mysql%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%90%E8%A1%8C%E7%9A%84%E7%AC%94%E8%AE%B0/</guid>
      <description>MySQL服务器处理客户端请求 客户端进程向服务端进程发送一段文本（MySQL语句），服务器处理后再向客户端发送一段文本（数据结果）
mysql服务端处理流程
 连接管理  处理连接   解析与优化  查询缓存 语法解析 查询优化   存储引擎  MyISAM、InnoDB 文件系统    InnoDB记录存储结构 InnoDB将数据划分为若干个页，以页（1页16KB）作为磁盘和内存之间交互的基本单位。</description>
    </item>
    
    <item>
      <title>《单元测试的艺术》笔记</title>
      <link>https://yunteng9345.github.io/p/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E7%9A%84%E8%89%BA%E6%9C%AF%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 23 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yunteng9345.github.io/p/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E7%9A%84%E8%89%BA%E6%9C%AF%E7%AC%94%E8%AE%B0/</guid>
      <description>优秀单元测试特性  他应该是自动化的，可重复执行 他应该很容易实现 他应该第二天还有意义 任何人都应该一键运行他 他应该运行速度很快 他的结果应该是很稳定的（如果运行之间没有修改，多次运行一个测试应该返回相同的结果） 他应该能完全控制被测试的单元 他应该是完全隔离的（独立于其他测试的运行） 如果他失败了，我们应该很容易发现什么是期待结果，进而定位问题  单元测试不等于集成测试 任何测试，如果他运行不快，结果不稳定，或者用到被测试单元的一个或多个真实依赖物，我们就认为他是集成测试。
单元测试也可以共用方法，使代码一目了然
存根（stub）和模拟对象的区别 存根是用来模拟各种场景的测试对象
细节 测试过程中，如果一个断言失败了，那么不需要关心后面的断言
单元测试，只做一件事情
Mock Mocks are used as a replacement for a dependency.、
断言注意 单元测试中不应该有多个断言，如果有的话，可分成2个单元测试。避免多个关注点
覆盖率低于20%说明缺少很多测试
断言中的魔法值应该用常量的英文单词，可一眼看出预期。
断言和操作分离
单元测试失败的原因：要改变人的习惯，更多的是做出心理上的改变，而非技术上的。人们不喜欢改变，改变通常伴随着害怕、不确定和怀疑。
 image-20211111152032834 
​	——摘自《单元测试的艺术》
研究表明：大部分的缺陷并不是来自代码自身，而是由人们之间的误解、不断变化的需求以及缺少应用领域知识造成的。</description>
    </item>
    
    <item>
      <title>《重构第二版》笔记</title>
      <link>https://yunteng9345.github.io/p/%E9%87%8D%E6%9E%84%E7%AC%AC%E4%BA%8C%E7%89%88%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 23 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yunteng9345.github.io/p/%E9%87%8D%E6%9E%84%E7%AC%AC%E4%BA%8C%E7%89%88%E7%AC%94%E8%AE%B0/</guid>
      <description>第1章——重构，第一个示例 思想  需求的变化使重构变得必要
重构就是以微小的步伐修改程序，如果有问题，可立马发现
傻瓜都能写出计算机可以理解的代码，唯有能写出人类容易理解的代码，才是优秀的程序员
 步骤  重构前，检查自己是否有一套可靠的测试集，这些测试必须有自我检验的能力（单元测试） 把复杂的代码分解为更小的单元  细节  将函数分割为单一功能，提炼到外部提供调用 改动完成之后，立马编译执行一遍单元测试，原因：在真的犯了错误时：只需要考虑一个很小的改动范围，使得排查与修复问题易如反掌。 变量改名，使它们更加简洁 处理结果变量时，将循环代码和变量放在一起，然后用查询函数取代临时变量 利用多态取代条件表达式  第2章——重构的原则 思想  重构的唯一目的就是让我们开发的更快，用更少的工作量创造更大的价值。
 第2章——重构的原则
第3章——代码的坏味道 思想  命名函数或变量，如果想不出一个好名字，说明背后很可能潜藏着更深的设计问题。
 步骤  规范注释，参照Spring源码   细节     </description>
    </item>
    
    <item>
      <title>《重构第二版》笔记</title>
      <link>https://yunteng9345.github.io/p/%E9%87%8D%E6%9E%84%E7%AC%AC%E4%BA%8C%E7%89%88%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 23 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yunteng9345.github.io/p/%E9%87%8D%E6%9E%84%E7%AC%AC%E4%BA%8C%E7%89%88%E7%AC%94%E8%AE%B0/</guid>
      <description>从古至今，长江和黄河流域水患不断，远古时期，大禹曾拓宽河道，清除淤沙让流水更加顺畅；都江堰作为史上最成功的的治水案例之一，用引流将岷江之水分流到多个支流中，以分担水流压力；三门峡和葛洲坝通过建造水库将水引入水库先存储起来，然后再想办法把水库中的水缓缓地排出去，以此提高下游的抗洪能力。
 高并发的处理方式目前有三种方式
 Scale-out(横向扩展)：采用分布式部署的方式把流量分流开，让每个服务器都承担一部分并发和流量。 缓存：使用缓存来提高系统的性能（空间换时间） 异步：某些场景下，处理未完成的请求时，可以先让请求返回，数据准备好之后返回请求方。这样可以在单位时间内处理更多的请求。  OSI 网络模型分层：物理层、数据链路层、 网络层、传输层、 会话层、表现层、应用层。
TCP/IP 协议分层： 链路层、 网络层、传输层、 应用层。
高可用系统设计的思路   系统设计
  failover机制
  超时调整
  降级、限流
    系统运维
  灰度发布
  故障演练
    高可扩展性的设计思路  拆分，将复杂问题简单化   1. 存储层的扩展性  业务维度 数据库维度  2. 业务层的扩展性  业务 重要性 请求来源  对于数据库连接池，根据我的经验，一般在线上我建议最小连接数控制在 10 左右，最大连接数控制在 20～30 左右即可。
java线程池学习（重要）</description>
    </item>
    
    <item>
      <title>Java多线程详解</title>
      <link>https://yunteng9345.github.io/p/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Mon, 23 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yunteng9345.github.io/p/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/</guid>
      <description>何为线程？  线程（thread）是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。
 Java线程的生命周期  Java线程的生命周期——码艺术 
 新建（New）：刚使用new方法，new出来的线程。 就绪（Runnable）：调用的线程的start()方法后，这时候线程处于等待CPU分配资源阶段，谁先抢的CPU资源，谁开始执行。 运行（Running）：当就绪的线程被调度并获得CPU的资源时，便进入了运行状态，run方法定义了线程的功能。 阻塞（Blocked）：在运行状态的时候，可能因为某些原因导致运行状态的线程进入了阻塞状态，比如sleep()、wait()之后线程就变为阻塞状态，这个时候需要有其他机制将阻塞状态的线程唤醒，比如调用notify()或者notifyAll()方法，唤醒的线程不会立即执行run()方法，而是进入就绪状态（Runnable）状态，再次等待CPU分配资源进入运行状态。 销毁（Terminated）：如果线程正常执行完成后或线程被提前强制性终止、出现异常导致结束，那么线程就要被销毁并释放资源。  新建状态 Thread t1 = new Thread();
这里的创建，仅仅是在JAVA的这种编程语言层面被创建，而在操作系统层面，真正的线程还没有被创建。只有当我们调用了 start() 方法之后，该线程才会被创建出来，进入Runnable状态。只有当我们调用了 start() 方法之后，该线程才会被创建出来。
 Java线程的新建状态——码艺术 
就绪状态 t1.start()
调用start()方法后，JVM 进程会去创建一个新的线程，而此线程不会马上被 CPU 调度运行，进入Running状态，这里会有一个中间状态，就是Runnable状态，可以理解为等待被 CPU 调度的状态。
 Java线程的就绪状态——码艺术 
Runnable状态的线程无法直接进入Blocked状态和Terminated状态。只能进入Running状态的线程，换句话说，只有获得CPU调度执行权的线程才有资格进入Blocked状态和Terminated状态，Runnable状态的线程要么能被转换成Running状态，要么被意外终止。如下所示：
 Java线程的就绪状态转变——码艺术 
运行状态 当CPU调度发生，并从任务队列中选中了某个Runnable线程时，该线程会进入Running执行状态，并且开始调用run()方法中逻辑代码。
处于Running状态的线程能发生以下状态转变：
 被转换成Terminated状态，比如调用 stop() 方法。 被转换成Blocked状态，比如调用了sleep(), wait() 方法被加入 waitSet 中。 被转换成Blocked状态，如进行 IO 阻塞操作，如查询数据库进入阻塞状态。 被转换成Blocked状态，比如获取某个锁的释放，而被加入该锁的阻塞队列中。 该线程的时间片用完，CPU 再次调度，进入Runnable状态。 线程主动调用 yield 方法，让出 CPU 资源，进入Runnable状态。   Java线程的运行状态转变——码艺术</description>
    </item>
    
  </channel>
</rss>
