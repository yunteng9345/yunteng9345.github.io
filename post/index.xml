<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 码艺术</title>
    <link>https://yunteng9345.github.io/post/</link>
    <description>Recent content in Posts on 码艺术</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 23 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://yunteng9345.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>《重构第二版》笔记</title>
      <link>https://yunteng9345.github.io/p/%E9%87%8D%E6%9E%84%E7%AC%AC%E4%BA%8C%E7%89%88%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 23 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yunteng9345.github.io/p/%E9%87%8D%E6%9E%84%E7%AC%AC%E4%BA%8C%E7%89%88%E7%AC%94%E8%AE%B0/</guid>
      <description>第1章——重构，第一个示例 思想  需求的变化使重构变得必要
重构就是以微小的步伐修改程序，如果有问题，可立马发现
傻瓜都能写出计算机可以理解的代码，唯有能写出人类容易理解的代码，才是优秀的程序员
 步骤  重构前，检查自己是否有一套可靠的测试集，这些测试必须有自我检验的能力（单元测试） 把复杂的代码分解为更小的单元  细节  将函数分割为单一功能，提炼到外部提供调用 改动完成之后，立马编译执行一遍单元测试，原因：在真的犯了错误时：只需要考虑一个很小的改动范围，使得排查与修复问题易如反掌。 变量改名，使它们更加简洁 处理结果变量时，将循环代码和变量放在一起，然后用查询函数取代临时变量 利用多态取代条件表达式  </description>
    </item>
    
    <item>
      <title>Java多线程详解</title>
      <link>https://yunteng9345.github.io/p/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Mon, 23 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yunteng9345.github.io/p/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%A6%E8%A7%A3/</guid>
      <description>何为线程？  线程（thread）是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。
 Java线程的生命周期  Java线程的生命周期——码艺术 
 新建（New）：刚使用new方法，new出来的线程。 就绪（Runnable）：调用的线程的start()方法后，这时候线程处于等待CPU分配资源阶段，谁先抢的CPU资源，谁开始执行。 运行（Running）：当就绪的线程被调度并获得CPU的资源时，便进入了运行状态，run方法定义了线程的功能。 阻塞（Blocked）：在运行状态的时候，可能因为某些原因导致运行状态的线程进入了阻塞状态，比如sleep()、wait()之后线程就变为阻塞状态，这个时候需要有其他机制将阻塞状态的线程唤醒，比如调用notify()或者notifyAll()方法，唤醒的线程不会立即执行run()方法，而是进入就绪状态（Runnable）状态，再次等待CPU分配资源进入运行状态。 销毁（Terminated）：如果线程正常执行完成后或线程被提前强制性终止、出现异常导致结束，那么线程就要被销毁并释放资源。  新建状态 Thread t1 = new Thread();
这里的创建，仅仅是在JAVA的这种编程语言层面被创建，而在操作系统层面，真正的线程还没有被创建。只有当我们调用了 start() 方法之后，该线程才会被创建出来，进入Runnable状态。只有当我们调用了 start() 方法之后，该线程才会被创建出来。
 Java线程的新建状态——码艺术 
就绪状态 t1.start()
调用start()方法后，JVM 进程会去创建一个新的线程，而此线程不会马上被 CPU 调度运行，进入Running状态，这里会有一个中间状态，就是Runnable状态，可以理解为等待被 CPU 调度的状态。
 Java线程的就绪状态——码艺术 
Runnable状态的线程无法直接进入Blocked状态和Terminated状态。只能进入Running状态的线程，换句话说，只有获得CPU调度执行权的线程才有资格进入Blocked状态和Terminated状态，Runnable状态的线程要么能被转换成Running状态，要么被意外终止。如下所示：
 Java线程的就绪状态转变——码艺术 
运行状态 当CPU调度发生，并从任务队列中选中了某个Runnable线程时，该线程会进入Running执行状态，并且开始调用run()方法中逻辑代码。
处于Running状态的线程能发生以下状态转变：
 被转换成Terminated状态，比如调用 stop() 方法。 被转换成Blocked状态，比如调用了sleep(), wait() 方法被加入 waitSet 中。 被转换成Blocked状态，如进行 IO 阻塞操作，如查询数据库进入阻塞状态。 被转换成Blocked状态，比如获取某个锁的释放，而被加入该锁的阻塞队列中。 该线程的时间片用完，CPU 再次调度，进入Runnable状态。 线程主动调用 yield 方法，让出 CPU 资源，进入Runnable状态。   Java线程的运行状态转变——码艺术</description>
    </item>
    
  </channel>
</rss>
